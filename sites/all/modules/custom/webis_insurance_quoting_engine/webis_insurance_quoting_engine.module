<?php

require_once('webis_insurance_quoting_engine.api.inc');
require_once('webis_insurance_quoting_engine.webform.inc');
//Insurance product price entity name
define('INSURANCE_PRICE_ENTITY_NAME', "insurance_price");
//Visitor to canada insurance price entity bundle name
define('VISITOR_INSURANCE_BUNDLE_NAME', "visitor_to_canada_insurance_price");
//Life insurance price entity bundle name
define('LIFE_INSURANCE_BUNDLE_NAME', "life_insurance_price");

define('VISITOR_INSURANCE', "visitor_insurance");
define('LIFE_INSURANCE', "life_insurance");
//Node type of insurance product.
define('NODE_TYPE_INSURANCE_PRODUCT', "insurance_product");
//Comparison type of the price search result.
define('HORIZONTAL_COMPARISON', "horizontal_comparison");
define('VERTICAL_COMPARISON', "vertical_comparison");

//insurance product logo image style
define('INSURANCE_LOGO_MEDIUM', "insurance_logo_medium");

define('NOT_AVAILABLE', "n/a");

define('VISITOR_INSURANCE_ONLINE_PURCHARSE_NID', '184');

/**
 * @file
 */
function webis_insurance_quoting_engine_menu(){
	$items = array();
  $items['get-a-quote/visitor-to-canada-insurance'] = array(
    'title' => 'Visitor to canada insurance plan and price search',
    'description' => "Visitor to canada insurance plan and price search",
    'page callback' => 'webis_insurance_quoting_engine_visitor_canada_price_search',
    'page arguments' => array(VERTICAL_COMPARISON),
    'access arguments' => array('access content'),
  );
  $items['get-a-quote/visitor-to-canada-insurance/vertical-comparison'] = array(
    'title' => 'Verticla comparison',
    'description' => "Visitor to canada insurance plan and price search",
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['get-a-quote/visitor-to-canada-insurance/horizontal-comparison'] = array(
    'title' => 'Horizontal comparison',
    'description' => "Visitor to canada insurance plan and price search",
    'page callback' => 'webis_insurance_quoting_engine_visitor_canada_price_search',
    'page arguments' => array(HORIZONTAL_COMPARISON),
    'access arguments' => array('access content'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function webis_insurance_quoting_engine_block_info() {
  
  $blocks = array(
/*    'visitor_insurance_info' => array(
      'info' => t('Visitor Insurance Info'),
      'cache' => DRUPAL_NO_CACHE,
    ),*/
  );
  return $blocks;

}

/**
 * Implements hook_block_view().
 */
function webis_insurance_quoting_engine_block_view($delta = '') {

  $block = array();
  switch ($delta) {
/*    case 'visitor_insurance_info':
      $block['content'] = webis_insurance_quoting_engine_block_content();
      $block['subject'] = t('Your Plan');
      break;*/

    default:
      break;
  }
  return $block;

}


function webis_insurance_quoting_engine_visitor_canada_price_search($mode = HORIZONTAL_COMPARISON){

	if(!isset($_GET['start']) || !isset($_GET['end']) || !isset($_GET['birthday']) || !isset($_GET['coverage']))
	{
		$msg = "";
		if(!isset($_GET['start'])){
      $msg .= t("Please chose your insurance policy 'Start Date'!")."<br>";
    }
		if(!isset($_GET['end'])){
      $msg .= t("Please chose your insurance policy 'End Date'!")."<br>";
    }		
		if(!isset($_GET['birthday'])){
      $msg .= t("Please chose your 'Birthday'!")."<br>";
    }
    if(!isset($_GET['coverage'])){
      $msg .= t("Please chose your insurance policy 'Coverage'!")."<br>";
    }
    return $msg;
	}
	//Get the birthday
	$birthday      = $_GET['birthday'];
  $birthday_time = strtotime( $birthday );
	//Insurance Amount
	$coverage      = $_GET['coverage'];
	$start         = $_GET['start'];
	$end           = $_GET['end'];
	$start_time    = strtotime( $start );
	$end_time      = strtotime( $end );
  //get age from birthday and start time
  $effective_date_age = webis_insurance_quoting_engine_age_from_dob($birthday, $start);
  //get age from birthday
  $current_age        = webis_insurance_quoting_engine_age_from_dob($birthday);  
	//total days
	$days = (($end_time - $start_time)/(60*60*24))+1;
	$days = round($days);
  setlocale(LC_MONETARY, 'en_US');

  $previous_level_amount = webis_insurance_quoting_engine_vtc_get_previous_coverage($coverage);
  $next_level_amount = webis_insurance_quoting_engine_vtc_get_next_coverage($coverage);;
  $current_path = current_path();

  $previous_link = l(t("Compare with @amount", array("@amount" => $previous_level_amount)), $current_path, array(
    'query' => array(
      "start" => $_GET['start'], 
      "end" => $_GET['end'], 
      "birthday" => $_GET['birthday'], 
      "coverage" => $previous_level_amount,
    )
  ));
  $next_link = l(t("Compare with @amount", array("@amount" => $next_level_amount)), $current_path, array(
    "query" => array(
      "start" => $_GET["start"], 
      "end" => $_GET["end"], 
      "birthday" => $_GET["birthday"], 
      "coverage" => $next_level_amount,
    )
  ));

	global $language;
	$content = '
    <div class="price_search_result_header">
  		<div class="price_search_result_summary">
        <span class="item first-item summary_label">'.t("Plans For:").'</span>
  			<span class="item age"><span class="label">'.t("Age:").'</span><span class="value">'.$current_age.'</span></span>
  		  <span class="item effective_date_age"><span class="label">'.t("Effective Date Age:").'</span><span class="value">'.$effective_date_age.'</span></span>
        <span class="item duration"><span class="label">'.t("Trip Duration:").'</span><span class="value">'.format_plural($days, "1 day", "@count days").'</span></span>
  			<span class="item last-item coverage"><span class="label">'.t("Coverage:").'</span><span class="value">'.money_format('%.0n', $coverage).'</span></span>
  		</div>
      <div class="price_search_compare_btns">
        <span class="compare_btn previous_level">'.$previous_link.'</span>
        <span class="compare_btn next_level">'.$next_link.'</span>
      </div>
    </div>
	';
  switch ($mode) {
    case HORIZONTAL_COMPARISON:
      $content .= webis_insurance_quoting_engine_visitor_canada_price_search_horizontal($current_age, $effective_date_age, $coverage, $days);
      break;
    case VERTICAL_COMPARISON:
      $content .= webis_insurance_quoting_engine_visitor_canada_price_search_vertical($current_age, $effective_date_age, $coverage, $days);
      break;
    default:

      break;
  }

	return $content;
}

/**
 *  Build the vertical comparision result
 *
 */
function webis_insurance_quoting_engine_visitor_canada_price_search_vertical($current_age, $effective_date_age, $coverage, $days){

  global $lowest_rate;
  global $lowest_rate_no_spmcc;

  $lowest_rate = 1000;
  $lowest_rate_no_spmcc = 1000;

  $output = '';
  $plans = webis_insurance_quoting_engine_get_plans(VISITOR_INSURANCE);

  //Initialize the calculating age. Some of the plans are culculated base on current age, others are culculated base on the effective age.
  $age = $current_age;
  //$key = entity id, $plan = entity;
  foreach ($plans as $key => $plan) {
    $insurance_product = webis_insurance_quoting_engine_get_insurance_by_price_eid($key);
    if (!empty($insurance_product)) {
      //render each plan.    
      $render_item = '';

      $which_age = webis_insurance_quoting_engine_get_tip_age_to_cal_premium($plan);
      
      switch ($which_age) {
        case 'purchase_date_age':
          $age = $current_age;        
          break;
        case 'effective_date_age':
          $age = $effective_date_age;
          break;
        default:
          break;
      }

      $price = webis_insurance_quoting_engine_get_tip_total_price($plan, $age, $coverage, TRUE, $days);
      $price_no_spmcc = webis_insurance_quoting_engine_get_tip_total_price($plan, $age, $coverage, FALSE, $days);

      if (!empty($price) || !empty($price_no_spmcc)) {
        $plan_price = array();
        $plan_price["title"] = $plan->title;
        $plan_price["id"] = $key;
        if (!empty($price)) {
          $plan_price["prices"] = $price;
        }
        if (!empty($price_no_spmcc)) {
          $plan_price["prices_no_spmcc"] = $price_no_spmcc;
        }
        $render_item .= "
          <div class='price_result_item'>
            <div class='product_info'>".webis_insurance_quoting_engine_render_insurance_product_vertical($insurance_product, $key)."</div>
            <div class='price_info'>".webis_insurance_quoting_engine_render_price_search_vertical($plan_price, $days)."</div>
          </div>
        ";

        $output .= $render_item;
      }
    }
  }
  $output = "
    <div class='lowest_rate'>
      <div class='spmcc'>
        <span class='label'>Lowest Price/Day:</span>
        <span class='value'>$".$lowest_rate."</span>
      </div>
      <div class='no_spmcc'>
        <span class='label'>Lowest Price/Day without SPMCC:</span>
        <span class='value'>$".$lowest_rate_no_spmcc."</span>
      </div>
    </div>".$output;
  return $output;
}

/**
 *  Build the horizontal comparision result
 *
 */
function webis_insurance_quoting_engine_visitor_canada_price_search_horizontal($current_age, $effective_date_age, $coverage, $days){
  $plans = webis_insurance_quoting_engine_get_plans(VISITOR_INSURANCE);
  $age = $current_age;
  $deductibles = array();
  $deductibles_no_spmcc = array();
  $plan_prices = array();
  $available_plan_ids = "";
  //Initalize the tab;
  $has_price = false;
  $has_price_no_spmcc = false;
  $search_price_result = "";
  $search_price_result_no_spmcc = "";
  //$key = entity id, $plan = entity;
  foreach ($plans as $key => $plan) {
    $which_age = webis_insurance_quoting_engine_get_tip_age_to_cal_premium($plan);
    switch ($which_age) {
      case 'purchase_date_age':
        $age = $current_age;        
        break;
      case 'effective_date_age':
        $age = $effective_date_age;
        break;
      default:
        break;
    }
    $price = webis_insurance_quoting_engine_get_tip_total_price($plan, $age, $coverage, TRUE, $days);
    $price_no_spmcc = webis_insurance_quoting_engine_get_tip_total_price($plan, $age, $coverage, FALSE, $days);

    if (!empty($price) || !empty($price_no_spmcc)) {
      $plan_prices[$key]["title"] = $plan->title;
      $plan_prices[$key]["id"] = $key;
      $available_plan_ids .= $key."+";
      if (!empty($price)) {
        $has_price = true;
        $plan_prices[$key]["prices"] = $price;
        $deductibles = array_unique (array_merge ($deductibles, array_keys($price)));
      }
      if (!empty($price_no_spmcc)) {
        $has_price_no_spmcc = true;        
        $plan_prices[$key]["prices_no_spmcc"] = $price_no_spmcc;        
        $deductibles_no_spmcc = array_unique (array_merge ($deductibles_no_spmcc, array_keys($price_no_spmcc)));
      }
    }
  }
  $available_plan_ids .= "0";
  $plan_carousel = views_embed_view('custom_content', 'block_7', $available_plan_ids);
  $content .= $plan_carousel;
  sort($deductibles);
  sort($deductibles_no_spmcc);

  $search_price_result = webis_insurance_quoting_engine_render_price_search_horizontal($plan_prices, $deductibles, $days, true);
  $search_price_result_no_spmcc = webis_insurance_quoting_engine_render_price_search_horizontal($plan_prices, $deductibles, $days, false);

  //Build the quicktab.
  $tabs = array(
    'spmcc' => array(
      'title' => t("With Stable Pre-Existing Medical Condition Coverage"),
      'contents' => array('#markup' => $search_price_result, 'weight' => 1),
    ),
    'nospmcc' => array(
      'title' => t("Without Stable Pre-Existing Medical Condition Coverage"),
      'contents' => array('#markup' => $search_price_result_no_spmcc, 'weight' => 2),
    ),
  );

  $qt_name = 'price_search_result';

  $qt_options = array(
    'style' => 'nostyle',
    'ajax' => FALSE,
    'default_tab' => 'spmcc',
  );

  $quicktabs_renderrable = quicktabs_build_quicktabs($qt_name, $qt_options, $tabs);
  $quicktabs_render = drupal_render($quicktabs_renderrable['content']);
  $quicktabs_content = "
    <div class='price_search_result_wrapper'>
    ".$quicktabs_render."
    </div>
  ";

  $content .= $quicktabs_content;
}

/**
 *  Render horizontal price search result
 *
 */
function webis_insurance_quoting_engine_render_price_search_horizontal($plan_prices, $deductibles, $days, $has_spmcc = true) {
  //Set up the search result wrapper
  if ($has_spmcc) {
    $search_price_result = "<div class='plan_result_wrapper spmcc'>";
  }
  else {
    $search_price_result = "<div class='plan_result_wrapper no_spmcc'>";
  }
  //Setup the search result header
  $search_price_result .= "<div class='plan_result_header'>";
  foreach ($plan_prices as $key => $plan_price) {
    $search_price_result .= "<span class='plan_item'><span class='price_per_day'>".t("<span class='part_1'>Price</span><span class='part_2'>/Day</span>")."</span><span class='price_total'>".t("Total")."</span></span>";
  }
  $search_price_result .= "</div>";
  //Setup the search result content.
  $search_price_result .= "<div class='plan_result_content'>";
  foreach ($deductibles as $key => $deductible) {
    $search_price_result .= "<div class='deductible deductible_".$deductible."'>";
    $search_price_result .= "<div class='deductible_header'><span class='label'>".t("Deductible").":</span><span class='value'>".money_format('%.0n', $deductible)."</span></div>";
    $search_price_result .= "<div class='deductible_content'>";
    foreach ($plan_prices as $key => $plan_price) {
      if ($key == count($plan_prices)) {
        $search_price_result .= "<span class='plan_price last'>";        
      }
      else {
        $search_price_result .= "<span class='plan_price'>";
      }
      if (isset($plan_price['prices'][$deductible])) {
        $deductible_price = round($plan_price['prices'][$deductible], 2);
        $search_price_result .= "<span class='price_per_day'>".round($deductible_price/$days, 2)."</span><span class='price_total'>".$deductible_price."</span>";
      }
      else {
        $search_price_result .= "<span class='price_per_day'>".t("N/A")."</span><span class='price_total'>".t("N/A")."</span>";
      }
      $search_price_result .= "</span>";
    }
    $search_price_result .= "</div>";
    //end of <!--div class='deductible_content'-->
    $search_price_result .= "</div>";
    //end of <!--div class='deductible'-->
  }
  $search_price_result .= "</div>";
  //End of <!--div class='plan_result_content'-->

  //Buy this plan / View plan details
  $search_price_result .= "<div class='plan_result_footer'>";
  foreach ($plan_prices as $key => $plan_price) {
    $search_price_result .= "<span class='plan_item'><span class='buy_plan cta'>".l(t("Buy This Plan"), "buy-plan", array("query" => array("id" => $plan_price['id'])))."</span><span class='view_plan cta'>".l(t("View Details"), "view-plan", array("query" => array("id" => $plan_price['id'])) )."</span></span>";
  }
  $search_price_result .= "</div>";


  $search_price_result .= "</div>";
  //End of <--div class='plan_result_wrapper'-->
  return $search_price_result;
}

/**
*	Helper function - calculate the age bases on the dob and policy_start_date(optional).
* @Arguments
* dob - birthday
* 
**/
function webis_insurance_quoting_engine_age_from_dob($dob, $policy_start_date = null) {
  $birthday_time = strtotime($dob);
  //If there is no start date, then use current time.
  if(!empty($policy_start_date)){
    $start_time = strtotime($policy_start_date);
    $age = ( date("md", $birthday_time) > date("md",$start_time) ? ( ( date("Y",$start_time)- date("Y", $birthday_time) )-1 ) : ( date("Y",$start_time) - date("Y", $birthday_time) ) );
  }else{
    $age = ( date("md", $birthday_time) > date("md") ? ( ( date("Y") - date("Y", $birthday_time) ) - 1 ) : ( date("Y") - date("Y", $birthday_time) ) );    
  }
  $age = $age > 0 ? $age : 0;
  return $age;
}

/**
 *  Get the current insurance product node by 'plan price' entity id
 *
 **/
function webis_insurance_quoting_engine_get_insurance_by_price_eid($price_entity_id, $lang = null){
  if (empty($lang)) {
    global $language;
    $lang = $language->language;
  }
  $entityQuery = new EntityFieldQuery();
  $entities_query = $entityQuery->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', NODE_TYPE_INSURANCE_PRODUCT)
        ->propertyCondition('language', $lang, '=')
        ->fieldCondition('field_insurance_price', 'target_id', $price_entity_id, '=')
        ->propertyCondition('status', 1)
        ->execute();
  if(!empty($entities_query)){
    foreach ($entities_query as $value) {
      $ids = array_keys($value);
      break;
    }
    if (!empty($ids[0])) {
      $nid = $ids[0];
      $insurance_product = entity_load_single('node', $nid);
      return $insurance_product;
    }
  }
}

/**
 *  Render insurance product for vertical price search result.
 *
 */
function webis_insurance_quoting_engine_render_insurance_product_vertical($insurance_product_node, $eid){

  //get the query argument from url
  $birthday      = $_GET['birthday'];
  $start         = $_GET['start'];
  $end           = $_GET['end'];
  $coverage      = $_GET['coverage'];

  $output = '';
  $node_url = ('node/'.$insurance_product_node->nid);

  //render the insurance product logo
  $field_images = field_get_items('node', $insurance_product_node, 'field_images');
  $logo = "";
  if (!empty($field_images)) {
    $image_item = array(
      'style_name' => INSURANCE_LOGO_MEDIUM, // just enter the sytle name you'd like
      'path' => $field_images[0]['uri'],
      'width' => '',
      'height' => '',
      'alt' => $field_images[0]['alt'], // optional
      'title' => $field_images[0]['title'], // optional
    );
    $logo =  l(theme('image_style', $image_item), $node_url, array("html" => TRUE, 'attributes' => array('target'=>'_blank')));
  }

  //render the title
  $title = l($insurance_product_node->title, $node_url, array('attributes' => array('target'=>'_blank')));
  
  //render the 'buy online' button
  $buy_online = l(
    t("Buy Online"), 
    "node/".VISITOR_INSURANCE_ONLINE_PURCHARSE_NID,
    array(
      'query' => array(
        'start'     => $start,
        'end'       => $end,
        'birthday'  => $birthday,
        'coverage'  => $coverage,
        'insurance_product' => $eid,
      ),
      'attributes' => array('target'=>'_blank')
    )
  );

  //render the body field
  $body_field = field_get_items('node',$insurance_product_node, 'body');
  $summary = $body_field[0]['safe_summary'];
  $summary_output = !empty($summary) ? "
      <div class='summary'>
        <a class='colorbox-inline' href='?inline=true#summary_content".$insurance_product_node->nid."'>".t("View plan summary")."</a>
        <div class='summary_content' id='summary_content".$insurance_product_node->nid."'>".$summary."</div>
      </div>" : "";
  $output .= "
    <div class='insurance_product'>
      <div class='logo'>".$logo."</div>
      <div class='title'>".$title."</div>
      <div class='buy_online'>".$buy_online."</div>
      ".$summary_output."
    </div>
  ";
  return $output;
}

/**
 *  Render vertical price search result
 *
 */
function webis_insurance_quoting_engine_render_price_search_vertical($plan_price, $days) {

  //get the query argument from url
  $birthday      = $_GET['birthday'];
  $start         = $_GET['start'];
  $end           = $_GET['end'];
  $coverage      = $_GET['coverage'];

  $output = "";

  //get the price entity id
  $eid = $plan_price['id'];
  //get the blended deductibles.
  $deductibles = array();
  $deductibles = !empty($plan_price['prices']) ? array_keys($plan_price['prices']) : $deductibles;
  $deductibles = !empty($plan_price['prices_no_spmcc']) ? array_unique (array_merge ($deductibles, array_keys($plan_price['prices_no_spmcc']))) : $deductibles;
  sort($deductibles);
  $header = array(
    array(
      'data'  => t("Deductible"),
      'class' => 'deductible',
    ),
    array(
      'data'  => t("Stable pre-existing medical condition coverage"),
      'class' => 'converage_type',
    ),
    array(
      'data'  => t("Price/Day"),
      'class' => 'price_per_day',
    ),
    array(
      'data'  => t("Total"),
      'class' => 'total_price',
    ),
  );
  $rows = array();

  global $lowest_rate;
  global $lowest_rate_no_spmcc;

  foreach ($deductibles as $key => $deductible) {
    //get total price
    $total = isset($plan_price['prices'][$deductible]) ? $plan_price['prices'][$deductible] : NOT_AVAILABLE;
    $per_day = ($total !== NOT_AVAILABLE) ? number_format((float)($total/$days), 2) : NOT_AVAILABLE;
    //get total no spmcc price
    $total_no_spmcc = isset($plan_price['prices_no_spmcc'][$deductible]) ? $plan_price['prices_no_spmcc'][$deductible] : NOT_AVAILABLE;
    $per_day_no_spmcc = ($total_no_spmcc !== NOT_AVAILABLE) ? number_format((float)($total_no_spmcc/$days), 2) : NOT_AVAILABLE;

    //get the lowest rate
    if ($per_day != NOT_AVAILABLE) {
      $lowest_rate = ($lowest_rate > $per_day) ? $per_day : $lowest_rate;
    }
    //get the lowest rate no spmcc
    if ($per_day_no_spmcc != NOT_AVAILABLE) {
      $lowest_rate_no_spmcc = ($lowest_rate_no_spmcc > $per_day_no_spmcc) ? $per_day_no_spmcc : $lowest_rate_no_spmcc;
    }

    $rows[] = array(
      array(
        'data' => l(
          "$".$deductible, 
          "node/".VISITOR_INSURANCE_ONLINE_PURCHARSE_NID, 
          array(
            "attributes" => array(
              "title" => t("Buy it with $@value deductible", array( "@value" => $deductible ) )
            ),
            "query" => array(
              'start' => $start,
              'end' => $end,
              'birthday' => $birthday,
              'coverage' => $coverage,
              'insurance_product' => $eid,
              'deductible' => $deductible,
            ),
            'attributes' => array('target'=>'_blank'),
          )
        ), 
        'class' => 'deductible',
      ),
      array(
        'data' => "<div class='spmcc'>".t("Yes")."</div><div class='no_spmcc'>".t("No")."</div>",
        'class' => ('converage_type'),
      ),
      array( 
        'data' => "<div class='spmcc'>".webis_insurance_quoting_engine_format_price($per_day)."</div><div class='no_spmcc'>".webis_insurance_quoting_engine_format_price($per_day_no_spmcc)."</div>",
        'class' => array('price_per_day'),
      ),
      array( 
        'data' => "<div class='spmcc'>".webis_insurance_quoting_engine_format_price($total)."</div><div class='no_spmcc'>".webis_insurance_quoting_engine_format_price($total_no_spmcc)."</div>",
        'class' => array('total_price'),
      ),
    );
  }
  $output .= theme("table", array("header" => $header, "rows" => $rows));
  $output = "<div class='insurance_price'>".$output."</div>";

  return $output;

}

function webis_insurance_quoting_engine_format_price($price) {
  if ($price != NOT_AVAILABLE) {
    $price = "$".$price;
    return $price;
  }
  else {
    return $price;
  }
}

/**
* Implementation of hook_webform_select_options_info().
* See webform/webform_hooks.php for further information on this hook in the Webform API.
*/
function webis_insurance_quoting_engine_webform_select_options_info() {
  $items = array();
  $items['available_province'] = array(
  'title' => t('Canada available Province'),
  'options callback' => 'webis_insurance_quoting_engine_webform_options_available_province'
  );
  $items['gender'] = array(
  'title' => t('Gender'),
  'options callback' => 'webis_insurance_quoting_engine_webform_options_gender'
  );
  $items['available_visitor_to_canada_insurance'] = array(
  'title' => t('Visitor to Canada Insurance'),
  'options callback' => 'webis_insurance_quoting_engine_webform_options_available_visitor_to_canada_insurance'
  );
  $items['available_insurance_coverage'] = array(
  'title' => t('Visitor to Canada Insurance Coverage'),
  'options callback' => 'webis_insurance_quoting_engine_vtc_get_coverage'
  );
  $items['available_insurance_deductible'] = array(
  'title' => t('Visitor to Canada Insurance Deductible'),
  'options callback' => 'webis_insurance_quoting_engine_vtc_get_deductible'
  );
  return $items;
}
